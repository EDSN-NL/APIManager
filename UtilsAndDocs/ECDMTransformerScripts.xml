<?xml version="1.0" encoding="windows-1252"?>
<RefData version="1.0" exporter="EA.25">
	<DataSet name="ECDM Platform_Transform_Template" table="t_template" filter="TemplateType='#TemplateType#' and TemplateName='#TemplateName#' and Style='#Style#'" stoplist=";TemplateID;">
		<DataRow>
			<Column name="TemplateID" value="{0A2FFAB6-E2FC-4957-914D-5AF7C02DDD05}"/>
			<Column name="TemplateType" value="ECDM Platform_Transform_Template"/>
			<Column name="TemplateName" value="Connector__RepairReverseConnector"/>
			<Column name="Template" value="$COMMENT=&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;&#xA;$COMMENT=&quot; IMPORTANT NOTE:  Both CDT and PRIM are NOT supported by the  &quot;&#xA;$COMMENT=&quot; Transformation scripts and are considered to be an immutable &quot;&#xA;$COMMENT=&quot; part of the framework. Therefore, changes to CDT and PRIM    &quot;&#xA;$COMMENT=&quot; must be managed manually!!									&quot;&#xA;$COMMENT=&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;&#xA;&#xA;$COMMENT=&quot; We arrive here when an Association is detected that is directed from destination to source.				&quot;&#xA;$COMMENT=&quot; This happens with most OAGIS connectors and we do not want this in our model. We're going to reverse the &quot;&#xA;$COMMENT=&quot; direction and adjust some properties...																	&quot;&#xA;$COMMENT=&quot; To be compatible with the code generation tools, an association must not have a direction!				&quot;&#xA;&#xA;$ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Transform reversed connector type: &quot;, connectorType, &quot; from &quot;, connectorSourceElemName, &quot; to &quot;, connectorDestElemName)%&#xA;&#xA;Association&#xA;{&#xA;  %TRANSFORM_CURRENT(&quot;direction&quot;, &quot;stereotype&quot;)%&#xA;  %TRANSFORM_REFERENCE(&quot;Connector&quot;, connectorGUID)%&#xA;  direction = &quot;unspecified&quot;&#xA;  %if classStereotype == &quot;ACC&quot; or classStereotype == &quot;Compound&quot; or classStereotype == &quot;CIMDatatype&quot;%&#xA;    stereotype = &quot;_ASCC&quot;&#xA;  %else%&#xA;	stereotype = &quot;_ASBIE&quot;&#xA;  %endIf%&#xA;    &#xA;  $COMMENT=&quot; We must specify source and target in reverse order since the original source and target are now swapped...&quot;&#xA;  $COMMENT=&quot; And we explicitly translate role names to Pascal Case...	&quot;&#xA;  Source&#xA;  {&#xA;	%if connectorDestRole != &quot;&quot;%&#xA;	  role=%qt%%CONVERT_NAME(connectorDestRole,&quot;Camel Case&quot;, &quot;Pascal Case&quot;)%%qt%&#xA;	%else%&#xA;	  role=&quot;&quot;&#xA;	%endIf%&#xA;    %TRANSFORM_REFERENCE(&quot;Class&quot;,connectorDestElemGUID)%&#xA;    %TRANSFORM_CURRENT(&quot;Target&quot;, &quot;role&quot;)%&#xA;  }&#xA;  Target&#xA;  {&#xA;	%if connectorSourceRole != &quot;&quot;%&#xA;	  role=%qt%%CONVERT_NAME(connectorSourceRole,&quot;Camel Case&quot;, &quot;Pascal Case&quot;)%%qt%&#xA;	%else%&#xA;	  role=&quot;&quot;&#xA;	%endIf%&#xA;	%TRANSFORM_REFERENCE(&quot;Class&quot;,connectorSourceElemGUID)%&#xA;    %TRANSFORM_CURRENT(&quot;Source&quot;, &quot;role&quot;)%&#xA;  }&#xA;}"/>
		</DataRow>
		<DataRow>
			<Column name="TemplateID" value="{1F2D161C-BCE5-4fab-B8C4-2A992C754250}"/>
			<Column name="TemplateType" value="ECDM Platform_Transform_Template"/>
			<Column name="TemplateName" value="File"/>
			<Column name="Template" value="$COMMENT=&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;&#xA;$COMMENT=&quot; IMPORTANT NOTE:  Both CDT and PRIM are NOT supported by the  &quot;&#xA;$COMMENT=&quot; Transformation scripts and are considered to be an immutable &quot;&#xA;$COMMENT=&quot; part of the framework. Therefore, changes to CDT and PRIM    &quot;&#xA;$COMMENT=&quot; must be managed manually!!									&quot;&#xA;$COMMENT=&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;&#xA;&#xA;$COMMENT=&quot;  This template creates a package to contain all transformed  &quot;&#xA;$COMMENT=&quot;  elements.                                                   &quot;&#xA;Package&#xA;{&#xA;  name= &quot;CoreModels&quot;&#xA;  namespaceroot=&quot;true&quot;&#xA;&#xA;  $COMMENT=&quot; If you want a logfile, replace the 'nolog' string with the full pathname of the logfile...&quot;&#xA;  $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;initialize&quot;, &quot;C:\Temp\ECDMLog.txt&quot;)%&#xA;  $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; **Starting model transformation...&quot;)%&#xA;  &#xA;  $COMMENT= &quot; This plugin loads GUIDS / typenames of all Core Data Types as well as the PRIM types	&quot;&#xA;  $COMMENT=&quot;  so that we can use them in the transformation scripts when necessary...					&quot;&#xA;  $COMMENT= &quot; But only call this on non-UPCCLibraries since UPCC is the one that defines the CDT!	    &quot;&#xA;  %if packageStereotype != &quot;PRIMModel&quot;%&#xA;    $result = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;loadClassifierTypes&quot;, &quot;Framework.CoreModels.PrimitiveDataTypes&quot;, &quot;PRIM&quot;)%&#xA;	%if $result != &quot;ok&quot;%&#xA;		$ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; **Error loading PRIM classifiers...&quot;)%&#xA;	%else%&#xA;		$ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; **Successfully loaded PRIM classifiers...&quot;)%&#xA;	%endIf%&#xA;  %endIf%&#xA;  %if packageStereotype != &quot;CDTModel&quot;%&#xA;    $result = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;loadClassifierTypes&quot;, &quot;Framework.CoreModels.CoreDataTypes&quot;, &quot;CDT&quot;)%&#xA;	%if $result != &quot;ok&quot;%&#xA;		$ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; **Error loading CDT classifiers...&quot;)%&#xA;	%else%&#xA;		$ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; **Successfully loaded CDT classifiers...&quot;)%&#xA;	%endIf%&#xA;  %endIf%&#xA;  %list=&quot;Namespace&quot; @separator=&quot;\n\n&quot; @indent=&quot;  &quot;%&#xA;&#xA;  $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; **Done with model transformation...&quot;)%&#xA;  $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;closeDown&quot;)%&#xA;}"/>
		</DataRow>
		<DataRow>
			<Column name="TemplateID" value="{59B9F032-B7E3-4491-8FC7-95375709F7F8}"/>
			<Column name="TemplateType" value="ECDM Platform_Transform_Template"/>
			<Column name="TemplateName" value="Class"/>
			<Column name="Template" value="$COMMENT=&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;&#xA;$COMMENT=&quot; IMPORTANT NOTE:  Both CDT and PRIM are NOT supported by the  &quot;&#xA;$COMMENT=&quot; Transformation scripts and are considered to be an immutable &quot;&#xA;$COMMENT=&quot; part of the framework. Therefore, changes to CDT and PRIM    &quot;&#xA;$COMMENT=&quot; must be managed manually!!									&quot;&#xA;$COMMENT=&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;&#xA;&#xA;$COMMENT=&quot;  'Compound' stereotype is used by CIM to indicate that this  &quot;&#xA;$COMMENT=&quot;  is a general-purpose class instead of a business object.    &quot;&#xA;$COMMENT=&quot;  Compounds translate to Aggregate Core Components (ACC's)    &quot;&#xA;$COMMENT=&quot;  and the attributes must thus be defined as Basic Core       &quot;&#xA;$COMMENT=&quot;  Components (BCC).                                           &quot;&#xA;$COMMENT=&quot;  CIM uses 'CIMDatatype' for internal business types and      &quot;&#xA;$COMMENT=&quot;  'Primitive' to indicate that this is a primitive type.      &quot;&#xA;&#xA;$COMMENT=&quot;  OAGIS calls almost everything a 'Type', since the elements  &quot;&#xA;$COMMENT=&quot;  are derived from XSD schemas. We remove the Type postfix in &quot;&#xA;$COMMENT=&quot;  order to create a more consistent model. We also unify all  &quot;&#xA;$COMMENT=&quot;  the different types in order to arrive at a more simple     &quot;&#xA;$COMMENT=&quot;  model.                                                      &quot;&#xA;&#xA;$ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Processing class: &quot;, className, &quot; with type: &quot;, elemType)%&#xA;&#xA;$index1 = %FIND(packageName, &quot;DataType&quot;)%&#xA;$index2 = %FIND(packageName, &quot;CodeLists_&quot;)%&#xA;$index3 = %FIND(packageName, &quot;CodeList_&quot;)%&#xA;$index4 = %FIND(packageName, &quot;Fields&quot;)%&#xA;$index5 = %FIND(packageName, &quot;CDTLibrary EDSN&quot;)%&#xA;$index6 = %FIND(packageName, &quot;CMIS&quot;)%&#xA;$index7 = %FIND(className, &quot;enum&quot;)%&#xA;&#xA;$COMMENT=&quot; In CMIS, enumeration classes have a name that starts with 'enum'...&quot;&#xA;%if $index6 != &quot;-1&quot; and $index7 == &quot;0&quot;%&#xA;  $CMISEnum = &quot;true&quot;&#xA;%else%&#xA;  $CMISEnum = &quot;false&quot;&#xA;%endIf%&#xA;&#xA;$className = %className%&#xA;$classStereotype = &quot;&quot;&#xA;$parentGUID = &quot;&quot;&#xA;&#xA;$COMMENT=&quot; This must be the namespace root of the CURRENT package model and NOT the TARGET model, since we use it to locate &quot;&#xA;$COMMENT=&quot; attributes in the current class!																					&quot;&#xA;$namespaceRoot = &quot;ReferenceModels&quot;&#xA;&#xA;$COMMENT=&quot; First of all, we make sure that all non-constructed components are implemented as Data Types instead of Classes...&quot;&#xA;%if $index5 != &quot;-1&quot;%&#xA;  $COMMENT=&quot; EDSN uses CDT as COMPOSITE Data Type and thus must be treated as COMPONENT and not Data Type!&quot;&#xA;  $classType = %elemType%&#xA;  $isComponent = &quot;true&quot;&#xA;%elseIf elemType == &quot;DataType&quot; or elemType == &quot;Enumeration&quot; or classStereotype == &quot;SimpleType&quot; or classStereotype == &quot;enumeration&quot; or classStereotype == &quot;PRIM&quot; or classStereotype == &quot;CDT&quot; or classStereotype == &quot;LDT&quot; or classStereotype == &quot;EDT&quot; or classStereotype == &quot;Union&quot; or classStereotype == &quot;CIMDatatype&quot; or classStereotype == &quot;Primitive&quot; or $index4 != &quot;-1&quot; or $index1 != &quot;-1&quot; or $index3 != &quot;-1&quot; or $CMISEnum == &quot;true&quot;%&#xA;  $classType = &quot;DataType&quot;&#xA;  $isComponent = &quot;false&quot;&#xA;%else%&#xA;  $classType = %elemType%&#xA;  $isComponent = &quot;true&quot;&#xA;%endIf%&#xA;&#xA;$COMMENT=&quot; Even if the component is part of 'Fields' (OAGIS), it can be an AttributeGroup, which we must convert to a CoreComponent! &quot;&#xA;$COMMENT=&quot; Unfortunately, there is no 'attribute group' concept in UML and since these are effectively constructed types, they have  &quot;&#xA;$COMMENT=&quot; to be converted to Core Components.																						 &quot;&#xA;$isAttributeGroup = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;classHasStereotype&quot;, classGUID, &quot;AttributeGroup&quot;)%&#xA;%if $isAttributeGroup == &quot;true&quot;%&#xA;  $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; found an AttributeGroup, this must be treated as component!&quot;)%&#xA;  $classType = &quot;Class&quot;&#xA;  $isComponent = &quot;true&quot;&#xA;%endIf%&#xA;&#xA;$ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Set element type to: &quot;, $classType)%&#xA;$isComplexType = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;classHasStereotype&quot;, classGUID, &quot;ComplexType&quot;)%&#xA;&#xA;$COMMENT=&quot; Since we differentiated between Component and 'non-Component', we can now figure-out what type of component we're dealing with...&quot;&#xA;$COMMENT=&quot; CIM uses the stereotype 'Compound' to indicate constructed primitive types. We do not allow these as such and thus replace them  &quot;&#xA;$COMMENT=&quot; with CoreComponent stereotype.																									&quot;&#xA;%if $isComponent == &quot;true&quot;%&#xA;  %if classStereotype == &quot;ACC&quot; or classStereotype == &quot;Compound&quot; or $isAttributeGroup == &quot;true&quot;%&#xA;    $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; setting classStereotype to 'CoreComponent'...&quot;)%&#xA;    $classStereotype = &quot;CoreComponent&quot;&#xA;  %else%&#xA;    $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; setting classStereotype to 'BusinessComponent'...&quot;)%&#xA;    $classStereotype = &quot;BusinessComponent&quot;&#xA;  %endIf%&#xA;%else%&#xA;  $COMMENT=&quot; No component, we're dealing with some kind of data type, first rule-out some simple ones...&quot;&#xA;  $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; processing class as data type...&quot;)%&#xA;  %if classStereotype == &quot;Union&quot;%&#xA;	$classStereotype = &quot;BDTUnion&quot;&#xA;  $COMMENT=&quot; HR-XML uses specialized enumerations, which are defined as complex types. These must be treated as                &quot;&#xA;  $COMMENT=&quot; ordinary business components since they add all kinds of additional functionality to a parent enumeration class...&quot;&#xA;  $COMMENT=&quot; EDSN uses the 'EDT' stereotype to indicate that the class is an enumerated type.								   &quot;&#xA;  %elseIf $isComplexType == &quot;false&quot; and elemType == &quot;Enumeration&quot; or $isComplexType == &quot;false&quot; and classStereotype == &quot;enumeration&quot; or $isComplexType == &quot;false&quot; and classStereotype == &quot;EDT&quot; or $isComplexType == &quot;false&quot; and $CMISEnum == &quot;true&quot;%&#xA;    $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; set stereotype to BDTEnumeration...&quot;)%&#xA;	$classStereotype = &quot;BDTEnumeration&quot;	&#xA;	$classType = &quot;Enumeration&quot;&#xA;  %elseIf classStereotype == &quot;CDT&quot;%&#xA;    $COMMENT=&quot; Kept these lines as 'safekeeping', CDT/PRIM should not be processed by these scripts! &quot;&#xA;	&#xA;    $COMMENT=&quot; These are the 'real' CDT declarations from UPCC, process seperately...	&quot;&#xA;    $COMMENT=&quot; &gt; Change base-type to DataType instead of Class,							&quot;&#xA;    $COMMENT=&quot; &gt; Add 'Type' to the name,												&quot;&#xA;    $COMMENT=&quot; &gt; Declare some of the types as primitives.								&quot;&#xA;    $className = %className%Type&#xA;    %if className == &quot;DateTime&quot; or className == &quot;Time&quot; or className == &quot;Date&quot;%&#xA;	  $classStereotype = &quot;CDTSimpleType&quot;&#xA;    %elseIf className == &quot;Indicator&quot; or className == &quot;Numeric&quot; or className == &quot;Value&quot;%&#xA;	  $classStereotype = &quot;CDTSimpleType&quot;&#xA;    %elseIf className == &quot;Percent&quot; or className == &quot;Rate&quot; or className == &quot;Duration&quot;%&#xA;      $classStereotype = &quot;CDTSimpleType&quot;&#xA;    %else%&#xA;      $classStereotype = &quot;CDTComplexType&quot;&#xA;    %endIf%&#xA;  %elseIf classStereotype == &quot;LDT&quot;%&#xA;    $COMMENT=&quot; These are the EDSN 'Logical Data Types', which are really BDT's. They are by default connected to a PRIM, which must be  &quot;&#xA;	$COMMENT=&quot; replaced by a link to a proper CDT. Since we're creating a new association here, the 'Connector' transformation must NOT &quot;&#xA;	$COMMENT=&quot; be executed for these types! &quot;&#xA;	$ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Going to define correct parent for EDSN LDT class: &quot;, className)%&#xA;	$result = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;determineEDSNLDTParent&quot;, className, classGUID)%&#xA;	%if $result != &quot;&quot;%&#xA;      $GUIDIndex = %FIND($result, &quot; &quot;)%&#xA;	  $parentStereotype = %LEFT($result, $GUIDIndex)%&#xA;	  $tmpGUID = %MID($result, $GUIDIndex)%&#xA;	  $parentGUID = %TRIM($tmpGUID)%&#xA;	  %if $parentStereotype == &quot;CDTComplexType&quot;%&#xA;		$classStereotype = &quot;BDTComplexType&quot;&#xA;	  %else%&#xA;		$classStereotype = &quot;BDTSimpleType&quot;&#xA;	  %endIf%&#xA;	  $COMMENT=&quot; Not all LDT's are BDT'. Some are in fact enumerations!&quot;&#xA;	  $result = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;getCDTNameByGUID&quot;, parentGUID)%&#xA;	  %if $result == &quot;EnumType&quot;%&#xA;	    $classType = &quot;Enumeration&quot;&#xA;	  %endIf%&#xA;	  $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Found parent GUID: &quot;, $parentGUID)%&#xA;	%else%&#xA;	  $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; **Error: no suitable parent found!&quot;)%&#xA;	%endIf%&#xA;  %elseIf classStereotype == &quot;PRIM&quot; or classStereotype == &quot;Primitive&quot;%&#xA;    $COMMENT=&quot; Reference models don't know about primitive Unions or Enumerations, so there are always simple types...&quot;&#xA;	$COMMENT=&quot; Apart from transforming the 'real' primitive library, primitives from other models shall not be used!  &quot;&#xA;	$classStereotype = &quot;PRIMSimpleType&quot;&#xA;  %elseIf $index1 != &quot;-1&quot;%&#xA;    $COMMENT=&quot; These are the OAGIS 'CDT' types, they are not Union or Enumeration, so we only have to know Simple/Complex&quot;&#xA;	$COMMENT=&quot; We also translate them to BDT's since there is only ONE 'real' CDT library and all the rest must be  BDT. &quot;&#xA;	%if classStereotype == &quot;SimpleType&quot;%&#xA;	  $classStereotype = &quot;BDTSimpleType&quot;&#xA;	%else%&#xA;	  $classStereotype = &quot;BDTComplexType&quot;&#xA;	%endIf%&#xA;  %else%&#xA;    $COMMENT=&quot; Everything else is considered a Business Data Type, only figure out whether it's Simple or Complex&quot;&#xA;	%if classStereotype == &quot;CIMDatatype&quot;%&#xA;	  $COMMENT=&quot; This is a CIM BDT. We now have to create a base type, since CIM is not CCTS compliant...&quot;&#xA;	  $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Going to discover parent for CIM class: &quot;, className)%&#xA;	  $result = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;determineBDTParent&quot;, $namespaceRoot, packagePath, className)%&#xA;      %if $result != &quot;&quot;%&#xA;        $GUIDIndex = %FIND($result, &quot; &quot;)%&#xA;	    $parentStereotype = %LEFT($result, $GUIDIndex)%&#xA;	    $tmpGUID = %MID($result, $GUIDIndex)%&#xA;	    $parentGUID = %TRIM($tmpGUID)%&#xA;		%if $parentStereotype == &quot;CDTComplexType&quot;%&#xA;		  $classStereotype = &quot;BDTComplexType&quot;&#xA;		%else%&#xA;		  $classStereotype = &quot;BDTSimpleType&quot;&#xA;		%endIf%&#xA;		$ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Found parent GUID: &quot;, $parentGUID)%&#xA;	  %else%&#xA;		$ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; **Error: no suitable parent found!&quot;)%&#xA;	  %endIf%&#xA;    %else%&#xA;	  $COMMENT=&quot; Must be OAGIS (or HR-XML OAGIS), since this is the only alternative reference model at the moment. 				&quot;&#xA;	  $COMMENT=&quot; Base class might point to the wrong CDT/PRIM package, so we must check whether this is the case and if so, we must &quot;&#xA;	  $COMMENT=&quot; determine whether the correct base class is a simple- or a complex type. The connector is 'rerouted' as part of    &quot;&#xA;	  $COMMENT=&quot; connector transformation. Here, we only determine whether we're dealing with primitive/complext type...			&quot;&#xA;	  $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Going to determine stereotype for BDT class: &quot;, className)%&#xA;	  $result = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;determineBDTStereotype&quot;, classGUID, className, &quot;QualifiedDataTypes,UnqualifiedDataTypes&quot;)%&#xA;      %if $result != &quot;&quot;%&#xA;	    $classStereotype = $result&#xA;		$ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Set class stereotype to: &quot;, $classStereotype)%&#xA;	  %else%&#xA;		$ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Use stereotype from original class.&quot;)%&#xA;		%if classStereotype == &quot;SimpleType&quot;%&#xA;	      $classStereotype = &quot;BDTSimpleType&quot;&#xA;	    %else%&#xA;	      $COMMENT=&quot; If unknown or explicitly stated as such, we make this a complex type...&quot;&#xA;	      $classStereotype = &quot;BDTComplexType&quot;&#xA;	    %endIf%&#xA;	  %endIf%&#xA;	%endIf%&#xA;  %endIf%&#xA;%endIf%&#xA;&#xA;$classType&#xA;{&#xA;%TRANSFORM_REFERENCE(&quot;Class&quot;)%&#xA;%TRANSFORM_CURRENT(&quot;stereotype&quot;, &quot;name&quot;, &quot;alias&quot;)%&#xA;&#xA;  $COMMENT=&quot; Make sure that class names are 'upper-camel-case' (e.g. start with a capital)...				&quot;&#xA;  $COMMENT=&quot; In EA, this variant is called 'Pascal Case' and the 'lower-camel-case' is called 'Camel Case'...		&quot;&#xA;  name=%qt%%CONVERT_NAME($className,&quot;Camel Case&quot;, &quot;Pascal Case&quot;)%%qt%&#xA;  stereotype = %qt%$classStereotype%qt%&#xA;&#xA;  %list=&quot;ClassParameter&quot; @separator=&quot;\n&quot; @indent=&quot;    &quot;%&#xA;  %list=&quot;ClassBase&quot; @separator=&quot;\n&quot; @indent=&quot;  &quot;%&#xA;  %list=&quot;ClassInterface&quot; @separator=&quot;\n&quot; @indent=&quot;  &quot;%&#xA;  %list=&quot;InnerClass&quot; @separator=&quot;\n&quot; @indent=&quot;  &quot;%&#xA;  %list=&quot;Attribute&quot; @separator=&quot;\n&quot; @indent=&quot;  &quot;%&#xA;  %list=&quot;Operation&quot; @separator=&quot;\n&quot; @indent=&quot;  &quot;%&#xA;}&#xA;&#xA;%if $classType == &quot;Enumeration&quot;%&#xA;  $COMMENT=&quot; In case of enumerations, we must create a generalization with the EnumType CDT...&quot;&#xA;  %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;createParentConnector&quot;, &quot;ECDM Platform&quot;, packagePath, className, classGUID, &quot;EnumType&quot;)%&#xA;%elseIf classStereotype == &quot;Union&quot;%&#xA;  $COMMENT=&quot; In case of unions, we must create a generalization with the UnionType CDT, but only if we do not already have a union as 	&quot;&#xA;  $COMMENT=&quot; a parent class (as is the case in e.g. HR-XML OAGIS implementation)...														&quot;&#xA;  $result = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;checkParentStereotype&quot;, className, classGUID, &quot;Union&quot;)%&#xA;  %if $result == &quot;false&quot;%&#xA;    %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;createParentConnector&quot;, &quot;ECDM Platform&quot;, packagePath, className, classGUID, &quot;UnionType&quot;)%&#xA;  %endIf%&#xA;%elseIf $parentGUID != &quot;&quot;%&#xA;  $COMMENT=&quot; In this case, we have determined an (alternative) parent class for the current class (e.g. CIM Data Types)...&quot;&#xA;  %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;createParentConnector&quot;, &quot;ECDM Platform&quot;, packagePath, className, classGUID, &quot;GUID&quot;, $parentGUID)%&#xA;%endIf%&#xA;%list=&quot;Connector&quot; @separator=&quot;\n&quot;%"/>
		</DataRow>
		<DataRow>
			<Column name="TemplateID" value="{612A3D46-34D6-42fe-AF9C-FFBB5494AFA4}"/>
			<Column name="TemplateType" value="ECDM Platform_Transform_Template"/>
			<Column name="TemplateName" value="Namespace"/>
			<Column name="Template" value="$COMMENT=&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;&#xA;$COMMENT=&quot; IMPORTANT NOTE:  Both CDT and PRIM are NOT supported by the  &quot;&#xA;$COMMENT=&quot; Transformation scripts and are considered to be an immutable &quot;&#xA;$COMMENT=&quot; part of the framework. Therefore, changes to CDT and PRIM    &quot;&#xA;$COMMENT=&quot; must be managed manually!!									&quot;&#xA;$COMMENT=&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;&#xA;&#xA;$COMMENT=&quot;  This template lists over all packages found in the source   &quot;&#xA;$COMMENT=&quot;  model.  An empty packagePath signifies a namespace root     &quot;&#xA;$COMMENT=&quot;  package.  In general we only list their contents and copy   &quot;&#xA;$COMMENT=&quot;  packages that represent a namespace.                        &quot;&#xA;%if packagePath == &quot;&quot;%&#xA;%list=&quot;Namespace&quot; @separator=&quot;\n&quot;%&#xA;%list=&quot;Class&quot; @separator=&quot;\n&quot;%&#xA;%endTemplate%&#xA;&#xA;$result = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Processing package: &quot;, packagePath)%&#xA;&#xA;$COMMENT=&quot; These are a set of name patterns used by OAGIS to indicate various low-level type definitions...&quot;&#xA;$index1 = %FIND(packageName, &quot;DataType&quot;)%&#xA;$index2 = %FIND(packageName, &quot;CodeLists_&quot;)%&#xA;$index3 = %FIND(packageName, &quot;CodeList_&quot;)%&#xA;$index4 = %FIND(packageName, &quot;Fields&quot;)%&#xA;$index5 = %FIND(packageName, &quot;BuiltinType&quot;)%&#xA;&#xA;$COMMENT=&quot; CIM uses this package name to store most of their business data types...&quot;&#xA;$index6 = %FIND(packageName, &quot;Domain&quot;)%&#xA;&#xA;$COMMENT=&quot; A set of packages used by EDSN to store Business Components, Enums and BDT's respectively...&quot;&#xA;$index7 = %FIND(packageName, &quot;CDTLibrary EDSN&quot;)%&#xA;$index8 = %FIND(packageName, &quot;EDTLibrary EDSN&quot;)%&#xA;$index9 = %FIND(packageName, &quot;LDTLibrary EDSN&quot;)%&#xA;&#xA;Package&#xA;{&#xA;%TRANSFORM_CURRENT(&quot;stereotype&quot;)%&#xA;%if packageStereotype == &quot;CCLibrary&quot;%&#xA;	stereotype = &quot;CCModel&quot;&#xA;$COMMENT=&quot; EDSN uses CDTLibrary for 'CONSTRUCTED Data Types'. This must thus be treaded as LOM!!!&quot;&#xA;%elseIf $index7 == &quot;-1&quot; and packageStereotype == &quot;CDTLibrary&quot; or $index1 != &quot;-1&quot;%&#xA;	stereotype = &quot;CDTModel&quot;&#xA;%elseIf packageStereotype == &quot;PRIMLibrary&quot; or $index5 != &quot;-1&quot;%&#xA;	stereotype = &quot;PRIMModel&quot;&#xA;%elseIf $index2 != &quot;-1&quot; or $index3 != &quot;-1&quot; or $index4 != &quot;-1&quot; or $index5 != &quot;-1&quot; or $index6 != &quot;-1&quot; or $index8 != &quot;-1&quot; or $index9 != &quot;-1&quot;%&#xA;  stereotype = &quot;BDTModel&quot;&#xA;%else%	&#xA;	$COMMENT=&quot; By default, we create Logical Object Model libraries (otherwise known as ABIE Libraries)...&quot;&#xA;	stereotype = &quot;LOM&quot;&#xA;%endIf%&#xA;&#xA;$COMMENT=&quot; First, process all sub-namespaces (packages) in current namespace. &quot;&#xA;$COMMENT=&quot; Next, process all classes found in the current namespace.          &quot;&#xA;%list=&quot;Namespace&quot; @separator=&quot;\n&quot; @indent=&quot;  &quot;%&#xA;%list=&quot;Class&quot; @separator=&quot;\n&quot; @indent=&quot;  &quot;%&#xA;}"/>
		</DataRow>
		<DataRow>
			<Column name="TemplateID" value="{7B70FBA0-BC22-42a3-B2AE-48A67B75A437}"/>
			<Column name="TemplateType" value="ECDM Platform_Transform_Template"/>
			<Column name="TemplateName" value="Connector"/>
			<Column name="Template" value="$COMMENT=&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;&#xA;$COMMENT=&quot; IMPORTANT NOTE:  Both CDT and PRIM are NOT supported by the  &quot;&#xA;$COMMENT=&quot; Transformation scripts and are considered to be an immutable &quot;&#xA;$COMMENT=&quot; part of the framework. Therefore, changes to CDT and PRIM    &quot;&#xA;$COMMENT=&quot; must be managed manually!!									&quot;&#xA;$COMMENT=&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;&#xA;&#xA;$COMMENT=&quot;  The connector template is used for copying connector        &quot;&#xA;$COMMENT=&quot;  information.  %TRANSFORM_REFERENCE()% macro calls are       &quot;&#xA;$COMMENT=&quot;  required to identify the connector and the classes in the   &quot;&#xA;$COMMENT=&quot;  transformed model that it links.                            &quot;&#xA;&#xA;%if classStereotype == &quot;LDT&quot; and connectorType == &quot;Generalization&quot;%&#xA;  $COMMENT=&quot; We already created a brand new parent during 'Class' processing, no further action required here!&quot;&#xA;  $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; This is an EDSN LDT, NO connector processing!&quot;)%&#xA;%endTemplate%&#xA;&#xA;$ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Transform connector type: &quot;, connectorType, &quot; from &quot;, connectorSourceElemName, &quot; to &quot;, connectorDestElemName)%&#xA;&#xA;%if connectorType == &quot;Generalization&quot; and classStereotype == &quot;enumeration&quot;%&#xA;  $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Enumeration with existing base-class, check type of: &quot;, connectorDestElemName)%&#xA;  $COMMENT=&quot; Note that we DO allow base-classes if they are non-primitive- or core-data-type types!&quot;&#xA;  $result = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;isPrimitiveOrCDT&quot;, connectorDestElemName)%&#xA;  %if $result == &quot;true&quot;%&#xA;    $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Primitive or CDT parent, skip this connector (solved elsewhere)!&quot;)%&#xA;  %endTemplate%&#xA;%endIf%	&#xA;&#xA;%if connectorType == &quot;Association&quot; and connectorDirection == &quot;Destination -&gt; Source&quot;%&#xA;  $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Found a 'reverse connector', going to repair...&quot;)%&#xA;  %Connector__RepairReverseConnector%&#xA;%elseIf connectorType == &quot;Aggregation&quot;%&#xA;  $COMMENT=&quot; If connector is an aggregation type, we have to convert this to an association.	&quot;&#xA;  $COMMENT=&quot; Unfortunately, the various reference models all treat aggregations differently...	&quot;&#xA;  %if connectorDirection == &quot;Unspecified&quot;%&#xA;	$COMMENT=&quot; Aggregations with unspecified direction are used by CIM. We convert them using a specialised template...	&quot;&#xA;	%Connector__FixCIMAggregation%&#xA;  %else%&#xA;	$COMMENT=&quot; For CCLibrary, direction is set from Source -&gt; Destination, but has other issues. Fix this here...&quot;&#xA;	%Connector__FixCCLibAggregation%&#xA;  %endIf%&#xA;%else%&#xA;  $COMMENT=&quot; All other connector types are processed here....&quot;&#xA;  %connectorType%&#xA;  {&#xA;    %TRANSFORM_CURRENT(&quot;stereotype&quot;)%&#xA;    %TRANSFORM_REFERENCE(&quot;Connector&quot;, connectorGUID)%&#xA;    %if connectorType == &quot;Generalization&quot;%&#xA;      $COMMENT=&quot; Assumption here is that there are no inheritance associations between ACC and ABIE. 	&quot;&#xA;	  $COMMENT=&quot; So all generalizations are either ACC - ACC or ABIE - ABIE 							&quot;&#xA;      stereotype = &quot;DerivedFrom&quot;&#xA;    %elseIf connectorType == &quot;Association&quot;%&#xA;	  %if classStereotype == &quot;ACC&quot; or classStereotype == &quot;Compound&quot; or classStereotype == &quot;CIMDatatype&quot;%&#xA;        stereotype = &quot;_ASCC&quot;&#xA;	  %else%&#xA;	    stereotype = &quot;_ASBIE&quot;&#xA;	  %endIf%&#xA;	%elseIf connectorType == &quot;Usage&quot;%&#xA;	  %if connectorStereotype == &quot;UnionMember&quot;%&#xA;	    stereotype = &quot;UnionMember&quot;&#xA;	  %else%&#xA;	    stereotype = &quot;Uses&quot;&#xA;	  %endIf%&#xA;	%else%&#xA;	  stereotype = %qt%%connectorStereotype%%qt%&#xA;    %endIf%&#xA;	   &#xA;    Source&#xA;    {&#xA;	  %if connectorType != &quot;Generalization&quot;%&#xA;		%if connectorSourceRole == &quot;&quot;%&#xA;	      role=%qt%%CONVERT_NAME(connectorSourceElemName,&quot;Camel Case&quot;, &quot;Pascal Case&quot;)%%qt%&#xA;		%else%&#xA;		  role=%qt%%CONVERT_NAME(connectorSourceRole,&quot;Camel Case&quot;, &quot;Pascal Case&quot;)%%qt%&#xA;		%endIf%&#xA;	  %endIf%&#xA;	  &#xA;      %TRANSFORM_REFERENCE(&quot;Class&quot;,connectorSourceElemGUID)%&#xA;      %TRANSFORM_CURRENT(&quot;Source&quot;, &quot;role&quot;)%&#xA;    }&#xA;    Target&#xA;    {&#xA;      $result = &quot;&quot;&#xA;	  $COMMENT=&quot; the following fragment assures that we have associations with valid CDT types (and not with PRIM's) &quot;&#xA;	  %if connectorType == &quot;Generalization&quot;%&#xA;	    $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; going to check connector target...&quot;)%&#xA;	    $result = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;transformCDTReference&quot;, connectorSourceElemGUID, connectorDestElemName, &quot;QualifiedDataTypes,UnqualifiedDataTypes&quot;)%&#xA;	    %if $result != &quot;&quot;%&#xA;          GUID = %qt%$result%qt%&#xA;	      $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; assigned an explicit GUID...&quot;)%&#xA;	    %endIf%&#xA;      %elseIf connectorDestRole == &quot;&quot;%&#xA;	    role=%qt%%CONVERT_NAME(connectorDestElemName,&quot;Camel Case&quot;, &quot;Pascal Case&quot;)%%qt%&#xA;	  %else%&#xA;	    role=%qt%%CONVERT_NAME(connectorDestRole,&quot;Camel Case&quot;, &quot;Pascal Case&quot;)%%qt%&#xA;	  %endIf%&#xA;	&#xA;	  %if $result == &quot;&quot;%&#xA;	    $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; no transformation, use standard TRANSFORM_REFERENCE instead...&quot;)%&#xA;	    %TRANSFORM_REFERENCE(&quot;Class&quot;,connectorDestElemGUID)%&#xA;	  %endIf%&#xA;      %TRANSFORM_CURRENT(&quot;Target&quot;, &quot;role&quot;)%&#xA;    }&#xA;  }&#xA;%endIf%"/>
		</DataRow>
		<DataRow>
			<Column name="TemplateID" value="{8341A668-0AC0-413a-AC32-258115A77F9E}"/>
			<Column name="TemplateType" value="ECDM Platform_Transform_Template"/>
			<Column name="TemplateName" value="Connector__FixCIMAggregation"/>
			<Column name="Template" value="$COMMENT=&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;&#xA;$COMMENT=&quot; IMPORTANT NOTE:  Both CDT and PRIM are NOT supported by the  &quot;&#xA;$COMMENT=&quot; Transformation scripts and are considered to be an immutable &quot;&#xA;$COMMENT=&quot; part of the framework. Therefore, changes to CDT and PRIM    &quot;&#xA;$COMMENT=&quot; must be managed manually!!									&quot;&#xA;$COMMENT=&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;&#xA;&#xA;$COMMENT=&quot; We arrive here on a CIM aggregation. These have the following issues:				&quot;&#xA;$COMMENT=&quot; * Drawn from Destination - Source, which is the wrong way around.					&quot;&#xA;$COMMENT=&quot; * Direction set to 'unspecified', which is Ok.										&quot;&#xA;$COMMENT=&quot; * Type is 'aggregation', which we don't allow in our model. Must be 'association'.	&quot;&#xA;&#xA;$ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Transform CIM aggregation from &quot;, connectorSourceElemName, &quot; to &quot;, connectorDestElemName)%&#xA;&#xA;Association&#xA;{&#xA;    %TRANSFORM_CURRENT(&quot;direction&quot;, &quot;stereotype&quot;)%&#xA;    %TRANSFORM_REFERENCE(&quot;Connector&quot;, connectorGUID)%&#xA;    direction = &quot;unspecified&quot;&#xA;    %if classStereotype == &quot;CIMDatatype&quot; or classStereotype == &quot;Compound&quot;%&#xA;      stereotype = &quot;_ASCC&quot;&#xA;    %else%&#xA;	  stereotype = &quot;_ASBIE&quot;&#xA;    %endIf%&#xA;    &#xA;	$COMMENT=&quot; Because the original aggregation was drawn in the 'wrong' order (destination to source), we have to swap source and target..&quot;&#xA;    Source&#xA;    {&#xA;      %TRANSFORM_REFERENCE(&quot;Class&quot;,connectorDestElemGUID)%&#xA;      %TRANSFORM_CURRENT(&quot;Target&quot;, &quot;aggregation&quot;, &quot;navigability&quot;)%&#xA;	  $COMMENT=&quot; If original target aggregation is 'none' or 'shared', we set the new source aggregation to 'shared'... &quot;&#xA;	  $COMMENT=&quot; In the other case, we had a composition relationship and we set source aggregation to 'composite'...	&quot;&#xA;	  %if connectorDestAggregation == &quot;none&quot; or connectorDestAggregation == &quot;shared&quot;%&#xA;	    aggregation = &quot;shared&quot;&#xA;	  %else%&#xA;	    aggregation = &quot;composite&quot;&#xA;	  %endIf%&#xA;	  navigability = &quot;Unspecified&quot;&#xA;    }&#xA;    Target&#xA;    {&#xA;	  %TRANSFORM_REFERENCE(&quot;Class&quot;,connectorSourceElemGUID)%&#xA;      %TRANSFORM_CURRENT(&quot;Source&quot;, &quot;aggregation&quot;, &quot;navigability&quot;)%&#xA;	  aggregation  = &quot;none&quot;&#xA;	  navigability = &quot;Unspecified&quot;&#xA;    }&#xA;}"/>
		</DataRow>
		<DataRow>
			<Column name="TemplateID" value="{B65EE14A-CD24-4ecc-9B77-696E9F6AFCEA}"/>
			<Column name="TemplateType" value="ECDM Platform_Transform_Template"/>
			<Column name="TemplateName" value="Attribute"/>
			<Column name="Template" value="$COMMENT=&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;&#xA;$COMMENT=&quot; IMPORTANT NOTE:  Both CDT and PRIM are NOT supported by the  &quot;&#xA;$COMMENT=&quot; Transformation scripts and are considered to be an immutable &quot;&#xA;$COMMENT=&quot; part of the framework. Therefore, changes to CDT and PRIM    &quot;&#xA;$COMMENT=&quot; must be managed manually!!									&quot;&#xA;$COMMENT=&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;&#xA;&#xA;$COMMENT=&quot;  Compound stereotype is used by CIM to indicate that this  &quot;&#xA;$COMMENT=&quot;  is a general-purpose class instead of a business object.  &quot;&#xA;$COMMENT=&quot;  Compounds translate to Aggregate Core Components (ACC's)  &quot;&#xA;$COMMENT=&quot;  and the attributes must thus be defined as Basic Core     &quot;&#xA;$COMMENT=&quot;  Components (BCC).                                         &quot;&#xA;$COMMENT=&quot;  CIM uses stereotype CIMDatatype for their local types.    &quot;&#xA;$COMMENT=&quot;  These have to be translated to Business Data Type.        &quot;&#xA;&#xA;$COMMENT=&quot; First of all, if we're dealing with a CIM Business Data Type, we have to get rid of the 'Value' attribute, since 	&quot;&#xA;$COMMENT=&quot; this is replaced by an inheritance association with the proper CDT type. This has been taken care of by the Class 	&quot;&#xA;$COMMENT=&quot; transformation script. We now simply discard the 'Value' attribute all together...									&quot;&#xA;%if classStereotype == &quot;CIMDatatype&quot; and attName == &quot;value&quot;%&#xA;  $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Ignoring CIM Data Type 'Value' attribute!&quot;)%&#xA;%endTemplate%&#xA;&#xA;$index1 = %FIND(packageName, &quot;DataType&quot;)%&#xA;$index2 = %FIND(packageName, &quot;CodeLists_&quot;)%&#xA;$index3 = %FIND(packageName, &quot;CodeList_&quot;)%&#xA;$index4 = %FIND(packageName, &quot;Fields&quot;)%&#xA;$index5 = %FIND(packageName, &quot;CDTLibrary EDSN&quot;)%&#xA;$index6 = %FIND(packageName, &quot;CMIS&quot;)%&#xA;$index7 = %FIND(className, &quot;enum&quot;)%&#xA;&#xA;$COMMENT=&quot; In CMIS, enumeration classes have a name that starts with 'enum'...&quot;&#xA;%if $index6 != &quot;-1&quot; and $index7 == &quot;0&quot;%&#xA;  $CMISEnum = &quot;true&quot;&#xA;%else%&#xA;  $CMISEnum = &quot;false&quot;&#xA;%endIf%&#xA;&#xA;$COMMENT=&quot; CMIS uses attributes named '_attrGroup1' that are of type 'cmisUndefinedAttribute'. If we find these, we have &quot;&#xA;$COMMENT=&quot; to translate them to the proper primitive.... &quot;&#xA;%if attType == &quot;cmisUndefinedAttribute&quot;%&#xA;  $CMISAnyAttribType = &quot;true&quot;&#xA;%else%&#xA;  $CMISAnyAttribType = &quot;false&quot;&#xA;%endIf%&#xA;&#xA;$COMMENT=&quot; The namespaceRoot variable is also used to pass namespace-root information to the database search functions.&quot;&#xA;$namespaceRoot = &quot;CoreModels&quot;&#xA;  &#xA;$COMMENT=&quot; classMetaType is used to indicate whether the class of which this is an attribute is either an ABIE/ACC, BDT, CDT or PRIM...&quot;&#xA;%if classStereotype == &quot;PRIM&quot; or classStereotype == &quot;Primitive&quot;%&#xA;  $classMetaType = &quot;PRIM&quot;&#xA;$COMMENT=&quot; EDSN uses stereotype 'CDT' for CONSTRUCTED Data Types and thus must be treated as ABIE!&quot;&#xA;%elseIf $index5 == &quot;-1&quot; and classStereotype == &quot;CDT&quot; or $index1 != &quot;-1&quot;%&#xA;  $classMetaType = &quot;CDT&quot;&#xA;%elseIf classStereotype == &quot;CIMDatatype&quot; or elemType == &quot;DataType&quot; or $index2 != &quot;-1&quot; or $index3 != &quot;-1&quot; or $index4 != &quot;-1&quot; or $CMISEnum == &quot;true&quot;%&#xA;  $classMetaType = &quot;BDT&quot;&#xA;%else%&#xA;  $classMetaType = &quot;ABIE&quot;&#xA;%endIf%&#xA;&#xA;$COMMENT=&quot; Even if the component is part of 'Fields' (OAGIS), it can be an AttributeGroup, which we must convert to a CoreComponent! &quot;&#xA;$COMMENT=&quot; This also implies that the attributes must be treated as attributes of a CoreComponent instead of a (primitive) data type.&quot;&#xA;$isAttributeGroup = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;classHasStereotype&quot;, classGUID, &quot;AttributeGroup&quot;)%&#xA;%if $isAttributeGroup == &quot;true&quot;%&#xA;  $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; attribute is part of an attribute group, handle with care!&quot;)%&#xA;  $classMetaType = &quot;ABIE&quot;&#xA;%endIf%&#xA;&#xA;$COMMENT=&quot; Some (HR-XML) enumerations are actually complex data types with attributes. These must be treated correctly!  &quot;&#xA;$COMMENT=&quot; The check below is a bit weird because the scripts do not allow the use of brackets and I wanted the test to  &quot;&#xA;$COMMENT=&quot; be somewhate understandable...																				 &quot;&#xA;$isComplexType = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;classHasStereotype&quot;, classGUID, &quot;ComplexType&quot;)%&#xA;%if classStereotype == &quot;enumeration&quot; and $isComplexType == &quot;true&quot;%&#xA;  $isEnumeration = &quot;false&quot;&#xA;%elseIf classStereotype != &quot;EDT&quot; and classStereotype != &quot;enumeration&quot; and elemType != &quot;Enumeration&quot; and $CMISEnum == &quot;false&quot;%&#xA;  $isEnumeration = &quot;false&quot;&#xA;%else%&#xA;  $isEnumeration = &quot;true&quot;&#xA;%endIf%&#xA;&#xA;&#xA;Attribute&#xA;{&#xA;  $COMMENT=&quot; Copy all except the properties that we're setting explicitly (and 'alias' we don't want at all)...     &quot;&#xA;  %TRANSFORM_CURRENT(&quot;stereotype&quot;, &quot;name&quot;, &quot;alias&quot;, &quot;type&quot;)%&#xA;&#xA;  $COMMENT=&quot; Make sure that all attribute names are 'upper-camel-case' (e.g. start with a capital)...				&quot;&#xA;  $COMMENT=&quot; In EA, this variant is called 'Pascal Case' and the 'lower-camel-case' is called 'Camel Case'...		&quot;&#xA;  $COMMENT=&quot; For supplementary attributes (indicated by stereotype 'Attribute'), the name must be lower-camel-case! &quot;&#xA;  %if $isAttributeGroup == &quot;false&quot; and attStereotype == &quot;Attribute&quot;%&#xA;	name=%qt%%CONVERT_NAME(attName,&quot;Pascal Case&quot;, &quot;Camel Case&quot;)%%qt%&#xA;  %else%&#xA;	name=%qt%%CONVERT_NAME(attName,&quot;Camel Case&quot;, &quot;Pascal Case&quot;)%%qt%&#xA;  %endIf%&#xA;&#xA;  $COMMENT=&quot; We try to locate a suitable GUID for the classifier type in our reference list. 	&quot;&#xA;  $COMMENT=&quot; This list contains the GUID's of the PRIM and CDT transformed types, which must 	&quot;&#xA;  $COMMENT=&quot; be used for all primitive types within our ECDM model...						   	&quot;&#xA;  $COMMENT=&quot; The operation also attempts to translate (CIM) primitive types to CDT's...      	&quot;&#xA;  $COMMENT=&quot; We skip enumerations (should not have a classifier type!!							&quot;&#xA;  %if $isEnumeration == &quot;false&quot;% &#xA;    $foundClassifier = &quot;false&quot;&#xA;	$COMMENT=&quot; If we're dealing with an 'attribute' (as is the case in CDT / BDT), we must ensure that the  &quot;&#xA;	$COMMENT=&quot; classifier is a PRIM and not a CDT...														&quot;&#xA;	%if $isAttributeGroup == &quot;false&quot; and attStereotype == &quot;Attribute&quot;%&#xA;	  $result = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;getPRIMClassifierGUID&quot;, attName, attType, $classMetaType)%&#xA;	%else% &#xA;	  %if $CMISAnyAttribType == &quot;true&quot;%&#xA;	    $COMMENT=&quot; We have another exception here. These are supplementary attributes of type 'AnyType'...&quot;&#xA;		$result = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;getPRIMClassifierGUID&quot;, attName, &quot;AnyType&quot;, $classMetaType)%&#xA;	  %else%&#xA;	    $COMMENT=&quot; In CMIS, we have many 'any' type attributes. These do not have a classifier but they do have &quot;&#xA;	    $COMMENT=&quot; a stereotype 'Any'. We force the CDT to 'AnyType' in this case... &quot;&#xA;	    %if attStereotype == &quot;Any&quot;%&#xA;	      $attribType = &quot;AnyType&quot;&#xA;	    %else%&#xA;	      $attribType = %CONVERT_NAME(attType,&quot;Camel Case&quot;, &quot;Pascal Case&quot;)%&#xA;	    %endIf%&#xA;        $result = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;getCDTClassifierGUID&quot;, attName, $attribType, $classMetaType)%&#xA;	  %endIf%&#xA;	%endIf%&#xA;    %if $result != &quot;&quot;%&#xA;      $GuidIndex = %FIND($result, &quot; &quot;)%&#xA;	  type = %qt%%LEFT($result, $GuidIndex)%%qt%&#xA;	  $Guid = %MID($result, $GuidIndex)%&#xA;	  classifier = %qt%%TRIM($Guid)%%qt%&#xA;	  $foundClassifier = &quot;true&quot;&#xA;    %else%&#xA;	  $COMMENT=&quot; At least, we now know that we do not have to change the type, set new instance to current type...			&quot;&#xA;	  $COMMENT=&quot; But make sure to convert to Pascal Case, 'cause that what we did with the class names as well... 			&quot;&#xA;      type = %qt%%CONVERT_NAME(attType,&quot;Camel Case&quot;, &quot;Pascal Case&quot;)%%qt%&#xA;    %endIf%&#xA;  &#xA;    $COMMENT=&quot; We are going to look in the database for a classifier only if not yet found and type has been defined. &quot;&#xA;    $COMMENT=&quot; The lookup function will first search for the classifier in the current package. If not found, it will &quot;&#xA;	$COMMENT=&quot; search the entire package tree of the package that is currently being transformed.			          &quot;&#xA;	$COMMENT=&quot; Since we translate all classifiers to Pascal Case, make sure to look for the correct name!			  &quot;&#xA;	%if $foundClassifier == &quot;false&quot; and attType != &quot;&quot;%&#xA;	  $attribType = %CONVERT_NAME(attType,&quot;Camel Case&quot;, &quot;Pascal Case&quot;)%&#xA;	  $result = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;findClassifierGUID&quot;, $namespaceRoot, packagePath, $attribType)%  &#xA;    %endIf%&#xA;  &#xA;    %if $foundClassifier == &quot;false&quot; and $result != &quot;&quot;%&#xA;	  $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Classifier found: &quot;, $result)%&#xA;      classifier = %qt%$result%qt%&#xA;    %else%&#xA;	  $COMMENT=&quot; Default operation, use built-in classifier transformation... &quot;&#xA;	  $ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Classifier not found, using TRANSFORM_CLASSIFIER...&quot;)%&#xA;      %TRANSFORM_CLASSIFIER()%&#xA;    %endIf%&#xA;  %endIf%&#xA;&#xA;  %if classStereotype == &quot;CIMDatatype&quot;% &#xA;    $COMMENT=&quot; Since we got rid of the 'Value' attribute, CIM now only has supplementary attributes (as it should be)...&quot;&#xA;	stereotype = &quot;Supplementary&quot;&#xA;  %elseIf attStereotype == &quot;CON&quot;%&#xA;	stereotype = &quot;Content&quot;&#xA;  %elseIf $isAttributeGroup == &quot;false&quot; and attStereotype == &quot;SUP&quot; or $isAttributeGroup == &quot;false&quot; and attStereotype == &quot;Attribute&quot; or $isAttributeGroup == &quot;false&quot; and $CMISAnyAttribType == &quot;true&quot;%&#xA;    stereotype = &quot;Supplementary&quot;&#xA;  %elseIf attStereotype == &quot;Facet&quot;%&#xA;	stereotype = &quot;Facet&quot;&#xA;  %elseIf classStereotype == &quot;enumeration&quot; or classStereotype == &quot;EDT&quot; or $CMISEnum == &quot;true&quot;%&#xA;    stereotype = &quot;enum&quot;&#xA;  %endIf%&#xA;}"/>
		</DataRow>
		<DataRow>
			<Column name="TemplateID" value="{DCE5D9CC-C75A-45ca-A22A-C566D899A76F}"/>
			<Column name="TemplateType" value="ECDM Platform_Transform_Template"/>
			<Column name="TemplateName" value="Connector__FixCCLibAggregation"/>
			<Column name="Template" value="$COMMENT=&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;&#xA;$COMMENT=&quot; IMPORTANT NOTE:  Both CDT and PRIM are NOT supported by the  &quot;&#xA;$COMMENT=&quot; Transformation scripts and are considered to be an immutable &quot;&#xA;$COMMENT=&quot; part of the framework. Therefore, changes to CDT and PRIM    &quot;&#xA;$COMMENT=&quot; must be managed manually!!									&quot;&#xA;$COMMENT=&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;&#xA;&#xA;$COMMENT=&quot; We arrive here on a CCLibrary aggregation. These have the following issues:			&quot;&#xA;$COMMENT=&quot; * Drawn from Source - Destination, which is OK.										&quot;&#xA;$COMMENT=&quot; * Direction set from Source -&gt; Destination, which must be changed to 'unspecified'.	&quot;&#xA;$COMMENT=&quot; * Shared/Composite diamond appears at destination 'cause of the 'drawing direction'	&quot;&#xA;$COMMENT=&quot; * Type is 'aggregation', which we don't allow in our model. Must be 'association'.	&quot;&#xA;&#xA;$ignore = %EXEC_ADD_IN(&quot;ECDM_EAPlugin&quot;, &quot;writeLogfile&quot;, &quot;ECDM Platform &gt;&gt; Transform CCLibrary aggregation from &quot;, connectorSourceElemName, &quot; to &quot;, connectorDestElemName)%&#xA;&#xA;Association&#xA;{&#xA;    %TRANSFORM_CURRENT(&quot;direction&quot;, &quot;stereotype&quot;)%&#xA;    %TRANSFORM_REFERENCE(&quot;Connector&quot;, connectorGUID)%&#xA;    direction = &quot;unspecified&quot;&#xA;    %if classStereotype == &quot;ACC&quot;%&#xA;      stereotype = &quot;_ASCC&quot;&#xA;    %else%&#xA;	  stereotype = &quot;_ASBIE&quot;&#xA;    %endIf%&#xA;    &#xA;	$COMMENT=&quot; For these connectors, source and target are Ok but the aggregation must be swapped since associations treat 	&quot;&#xA;	$COMMENT=&quot; this differently from aggregations!																			&quot;&#xA;    Source&#xA;    {&#xA;      %TRANSFORM_REFERENCE(&quot;Class&quot;,connectorSourceElemGUID)%&#xA;      %TRANSFORM_CURRENT(&quot;Source&quot;, &quot;navigability&quot;, &quot;aggregation&quot;)%&#xA;	  navigability = &quot;Unspecified&quot;&#xA;	  $COMMENT=&quot; If original target aggregation is 'none' or 'shared', we set the new source aggregation to 'shared'... &quot;&#xA;	  $COMMENT=&quot; In the other case, we had a composition relationship and we set source aggregation to 'composite'...	&quot;&#xA;	  %if connectorDestAggregation == &quot;none&quot; or connectorDestAggregation == &quot;shared&quot;%&#xA;	    aggregation = &quot;shared&quot;&#xA;	  %else%&#xA;	    aggregation = &quot;composite&quot;&#xA;	  %endIf%&#xA;    }&#xA;    Target&#xA;    {&#xA;	  %TRANSFORM_REFERENCE(&quot;Class&quot;,connectorDestElemGUID)%&#xA;      %TRANSFORM_CURRENT(&quot;Target&quot;, &quot;navigability&quot;, &quot;aggregation&quot;)%&#xA;	  $COMMENT=&quot; Target aggregation must always be set to 'none' &quot;&#xA;	  navigability = &quot;Unspecified&quot;&#xA;	  aggregation  = &quot;none&quot;&#xA;    }&#xA;}"/>
		</DataRow>
	</DataSet>
</RefData>
